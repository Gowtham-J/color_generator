{"version":3,"sources":["utils.js","SingleColor.js","App.js","reportWebVitals.js","index.js"],"names":["rgbToHex","SingleColor","rgb","index","weight","colorValue","useState","alert","setAlert","bcg","join","hexValue","useEffect","timeout","setTimeout","clearTimeout","className","style","background","onClick","navigator","clipboard","writeText","App","color","setColor","error","setError","Values","all","list","setList","onSubmit","e","preventDefault","colors","console","log","htmlFor","value","onChange","target","placeholder","type","map","hex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMASeA,I,OCuBAC,EA7BK,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WACzC,EAA0BC,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAMP,EAAIQ,KAAK,KACfC,EAAQ,WAAON,GASrB,OAPAO,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBN,GAAS,KACR,KACH,OAAO,kBAAMO,aAAaF,MACzB,CAACN,IAGF,0BACES,UAAS,gBAAWb,EAAQ,IAAM,eAClCc,MAAO,CAAEC,WAAW,OAAD,OAAST,EAAT,MACnBU,QAAS,WACPX,GAAS,GACTY,UAAUC,UAAUC,UAAUX,IALlC,UAQE,oBAAGK,UAAU,gBAAb,UAA8BZ,EAA9B,OACA,mBAAGY,UAAU,cAAb,SAA4BL,IAC3BJ,GAAS,mBAAGS,UAAU,QAAb,qC,gBC4BDO,MAlDf,WACE,MAA0BjB,mBAAS,IAAnC,mBAAOkB,EAAP,KAAcC,EAAd,KACA,EAA0BnB,oBAAS,GAAnC,mBAAOoB,EAAP,KAAcC,EAAd,KACA,EAAwBrB,mBAAS,IAAIsB,IAAO,WAAWC,IAAI,KAA3D,mBAAOC,EAAP,KAAaC,EAAb,KAcA,OACE,qCACE,0BAASf,UAAU,YAAnB,UACE,iDACA,uBAAMgB,SAhBS,SAACC,GACpBA,EAAEC,iBAEF,IACE,IAAMC,EAAS,IAAIP,IAAOJ,GAAOK,IAAI,IACrCE,EAAQI,GACR,MAAOT,GACPC,GAAS,GACTS,QAAQC,IAAIX,KAQV,UACE,uBACEY,QAAQ,OACRC,MAAOf,EACPgB,SAAU,SAACP,GAAD,OAAOR,EAASQ,EAAEQ,OAAOF,QACnCG,YAAY,UACZ1B,UAAWU,EAAQ,QAAU,OAE/B,wBAAQV,UAAU,MAAM2B,KAAK,SAA7B,4BAKJ,yBAAS3B,UAAU,SAAnB,SACGc,EAAKc,KAAI,SAACpB,EAAOrB,GAChB,OACE,cAAC,EAAD,2BAEMqB,GAFN,IAGErB,MAAOA,EACPE,WAAYmB,EAAMqB,MAHb1C,YC/BJ2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5c334ffe.chunk.js","sourcesContent":["function componentToHex(c) {\r\n  var hex = c.toString(16);\r\n  return hex.length === 1 ? \"0\" + hex : hex;\r\n}\r\n\r\nfunction rgbToHex(r, g, b) {\r\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\r\n}\r\n\r\nexport default rgbToHex;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport rgbToHex from \"./utils\";\r\n\r\nconst SingleColor = ({ rgb, index, weight, colorValue }) => {\r\n  const [alert, setAlert] = useState(false);\r\n\r\n  const bcg = rgb.join(\",\");\r\n  const hexValue = `#${colorValue}`;\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setAlert(false);\r\n    }, 3000);\r\n    return () => clearTimeout(timeout);\r\n  }, [alert]);\r\n\r\n  return (\r\n    <article\r\n      className={`color ${index > 10 && \"color-light\"}`}\r\n      style={{ background: `rgb(${bcg})` }}\r\n      onClick={() => {\r\n        setAlert(true);\r\n        navigator.clipboard.writeText(hexValue);\r\n      }}\r\n    >\r\n      <p className=\"percent-value\">{weight}%</p>\r\n      <p className=\"color-value\">{hexValue}</p>\r\n      {alert && <p className=\"alert\">copied to clipboard</p>}\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default SingleColor;\r\n","import React, { useState } from \"react\";\nimport SingleColor from \"./SingleColor\";\n\nimport Values from \"values.js\";\n\nfunction App() {\n  const [color, setColor] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [list, setList] = useState(new Values(\"#f15020\").all(10));\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    try {\n      const colors = new Values(color).all(10);\n      setList(colors);\n    } catch (error) {\n      setError(true);\n      console.log(error);\n    }\n  };\n\n  return (\n    <>\n      <section className=\"container\">\n        <h3>color generator</h3>\n        <form onSubmit={handleSubmit}>\n          <input\n            htmlFor=\"text\"\n            value={color}\n            onChange={(e) => setColor(e.target.value)}\n            placeholder=\"#f15020\"\n            className={error ? \"error\" : null}\n          ></input>\n          <button className=\"btn\" type=\"submit\">\n            generate\n          </button>\n        </form>\n      </section>\n      <section className=\"colors\">\n        {list.map((color, index) => {\n          return (\n            <SingleColor\n              key={index}\n              {...color}\n              index={index}\n              colorValue={color.hex}\n            />\n          );\n        })}\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}